

/*
그룹 함수
- 하나 이상의 행을 그룹으로 묶어서 하나의 결과로 나타냅니다
- SUM(누적 합계), AVG(평균), COUNT(총 개수), 
  MAX(최대값), MIN(최소값), STDDEV(표준편차), VARIANCE(분산)
- SELECT 문뒤에 작성하고, 여러 그룹 함수를 쉼표로 구분하여 함께 사용할 수 있습니다
  Ex) SELECT  group_function( column ), .....
      FROM table
- 그룹 함수는 다른 연산자와 달리 해달 컬럼 값이 NULL 인 것을 제외하고 계산합니다
 */

SELECT * FROM emp;

/*
SUM
- SUM 함수는 해당 컬럼 값들에 대한 총합을 구합니다
*/

-- 급여 총액
SELECT SUM(sal)
FROM emp;

-- 커미션 총액
SELECT SUM(comm)
FROM emp;


/*
AVG
- AVG 함수는 해당 커럼 값들에 대한 평균을 구합니다
*/
-- 급여 평균
SELECT AVG(sal)
FROM emp;


/*
MAX, MIN
- 지정한 컬럼 값 중에서 최대값, 최소값을 구합니다
 */
-- 가장 높은 급여와 낮은 급여
SELECT MAX(sal), MIN(sal)
FROM emp;


/*
COUNT
- 행의 개수를 반환합니다. 특정 컬럼을 지정하면, 해당 컬럼 값을 갖고 있는 행의 갯수를 계산합니다
 */
-- 커미션 받는 사원수
SELECT COUNT(comm)
FROM emp;


-- 전체 사원수와 커미션 받는 사원수
SELECT COUNT(*), COUNT(comm)
FROM emp;

-- 직업의 갯수
SELECT COUNT(job) "업무수"
FROM emp;

SELECT COUNT(DISTINCT job) "업무수"
FROM emp;




/*
그룹 함수
- 하나 이상의 행을 그룹으로 묶어서 하나의 결과로 나타냅니다
- SUM(누적 합계), AVG(평균), COUNT(총 개수), 
  MAX(최대값), MIN(최소값), STDDEV(표준편차), VARIANCE(분산)
- SELECT 문뒤에 작성하고, 여러 그룹 함수를 쉼표로 구분하여 함께 사용할 수 있습니다
  Ex) SELECT  group_function( column ), .....
      FROM table
- 그룹 함수는 다른 연산자와 달리 해달 컬럼 값이 NULL 인 것을 제외하고 계산합니다
 */

SELECT * FROM emp;

/*
SUM
- SUM 함수는 해당 컬럼 값들에 대한 총합을 구합니다
*/

-- 급여 총액
SELECT SUM(sal)
FROM emp;

-- 커미션 총액
SELECT SUM(comm)
FROM emp;


/*
AVG
- AVG 함수는 해당 커럼 값들에 대한 평균을 구합니다
*/
-- 급여 평균
SELECT AVG(sal)
FROM emp;


/*
MAX, MIN
- 지정한 컬럼 값 중에서 최대값, 최소값을 구합니다
 */
-- 가장 높은 급여와 낮은 급여
SELECT MAX(sal), MIN(sal)
FROM emp;


/*
COUNT
- 행의 개수를 반환합니다. 특정 컬럼을 지정하면, 해당 컬럼 값을 갖고 있는 행의 갯수를 계산합니다
 */
-- 커미션 받는 사원수
SELECT COUNT(comm)
FROM emp;


-- 전체 사원수와 커미션 받는 사원수
SELECT COUNT(*), COUNT(comm)
FROM emp;

-- 직업의 갯수
SELECT COUNT(job) "업무수"
FROM emp;

SELECT COUNT(DISTINCT job) "업무수"
FROM emp;







/*
그룹 함수
- 하나 이상의 행을 그룹으로 묶어서 하나의 결과로 나타냅니다
- SUM(누적 합계), AVG(평균), COUNT(총 개수), 
  MAX(최대값), MIN(최소값), STDDEV(표준편차), VARIANCE(분산)
- SELECT 문뒤에 작성하고, 여러 그룹 함수를 쉼표로 구분하여 함께 사용할 수 있습니다
  Ex) SELECT  group_function( column ), .....
      FROM table
- 그룹 함수는 다른 연산자와 달리 해달 컬럼 값이 NULL 인 것을 제외하고 계산합니다
 */

/*
SUM
- SUM 함수는 해당 컬럼 값들에 대한 총합을 구합니다
*/

-- 급여 총액
SELECT SUM(sal)
FROM emp;

-- 커미션 총액
SELECT SUM(comm)
FROM emp;


/*
AVG
- AVG 함수는 해당 커럼 값들에 대한 평균을 구합니다
*/
-- 급여 평균
SELECT AVG(sal)
FROM emp;


/*
MAX, MIN
- 지정한 컬럼 값 중에서 최대값, 최소값을 구합니다
 */
-- 가장 높은 급여와 낮은 급여
SELECT MAX(sal), MIN(sal)
FROM emp;


/*
COUNT
- 행의 개수를 반환합니다. 특정 컬럼을 지정하면, 해당 컬럼 값을 갖고 있는 행의 갯수를 계산합니다
 */
-- 커미션 받는 사원수
SELECT COUNT(comm)
FROM emp;


-- 전체 사원수와 커미션 받는 사원수
SELECT COUNT(*), COUNT(comm)
FROM emp;

-- 직업의 갯수
SELECT COUNT(job) "업무수"
FROM emp;

SELECT COUNT(DISTINCT job) "업무수"
FROM emp;


/*
GROUP BY 절
- 그룹함수를 사용하되 어떤 컬럼 값을 기준으로 그룹 함수를 적용할 수 있습니다
  Ex) SELECT 컬럼명, 그룹함수
      FROM 테이블명
      WHERE 조건
      GROUP BY 컬럼명;
- 합계, 평균등을 어떠한 컬럼을 기준으로 그 컬럼의 값 별로 보고자 할 때 
  GROUP BY 절 뒤에 해당 컬럼을 작성하면 됩니다
- GROUP BY 절 다음에는 컬럼의 별칭을 사용할 수 없고, 반드시 컬럼명을 사용해야 합니다  
 */

-- 사원 테이블을 부서번호로 그룹
SELECT deptno
FROM emp
GROUP BY deptno;

-- 부서별 평균 급여
SELECT deptno, AVG(sal)
FROM emp
GROUP BY deptno;

-- 부서별 최대 여, 최소 급여
SELECT deptno, MAX(sal), MIN(sal)
FROM emp
GROUP BY deptno;

-- 부서별 사원수와 커미션을 받는 사원수
SELECT deptno, COUNT(*), COUNT(comm)
FROM emp
GROUP BY deptno;

-- ORDER BY 는 항상 맨 마지막에 작성합니다
SELECT deptno, COUNT(*), COUNT(comm)
FROM emp
GROUP BY deptno
ORDER BY deptno asc;


/*
HAVING
- 조건을 사용해서 결과를 제한할 때에는 WHERE 절을 사용하지만,
  그룹의 결과를 제한할 때에는 HAVING 절을 사용합니다
  
 */
--Error
--SELECT deptno, AVG(sal)
--FROM emp
--WHERE AVG(sal) >= 2000
--GROUP BY deptno;

SELECT deptno, AVG(sal)
FROM emp
GROUP BY deptno
HAVING AVG(sal) >= 2000;


-- 최고 평균 급여
SELECT MAX(AVG(sal))
FROM emp
GROUP BY deptno;


-------------------------QUIZ-------------------------

-- 가장 최근에 입사한 사원의 입사일과 가장 오래된 사원의 입사일을 출력하는 쿼리문을 작성하세요
SELECT MAX(hiredate) as "최근 입사한 사원", MIN(hiredate) as "오랜된 사원"
FROM emp;


-- 부서별 커미션 받는 사원의 수를 출력하세요
SELECT deptno, COUNT(comm)
FROM emp
GROUP BY deptno;

-- salesman 대한 급여의 평균, 최고액, 최저액, 합계를 출력하세요
SELECT AVG(sal), MAX(sal), MIN(sal), SUM(sal)
FROM emp
WHERE job LIKE 'SAL%';

SELECT AVG(sal), MAX(sal), MIN(sal), SUM(sal)
FROM emp
WHERE job LIKE 'SALESMAN';


-- 각 부서별로 인원수, 급여의 평균, 최저 급여, 최고 급여, 급여의 합을 구하고,
-- 급여의 합이 많은 순으로 출력하세요
SELECT deptno, COUNT(*), AVG(sal), MIN(sal), MAX(sal), SUM(sal)
FROM emp
GROUP BY deptno
ORDER BY SUM(sal) desc;

-- 업무별 급여의 평균이 3000 이상인 업무에 대해서 업무명, 평균 급여, 급여의 합을 출력하세요
SELECT job, AVG(sal), SUM(sal)
FROM emp
GROUP BY job
HAVING AVG(sal) >= 3000;

-- 전체 월급이 4000을 초과하는 각 업무에 대해서 업무와 월급여 합계를 출력하세요
-- 단 판매원은 제외하고 월급여 합계로 내림차순 정렬합니다
SELECT job, SUM(sal) 
FROM emp
WHERE job NOT LIKE 'SALE%'
GROUP BY job
HAVING SUM(sal) > 4000
ORDER BY SUM(sal) desc;




/*
Join
- 하나 이상의 테이블에서, 한번의 질의문으로 원하는 자료를 검색할 때 사용합니다
 */

 SELECT *
 FROM emp, dept;
 
/*
equi join
- 가장 많이 사용하는 조인 방식으로 조인 대상이 되는 두 테이블에서 
  공통적으로 존재하는 컬럼의 값이 일치되는 행을 연결해서 결과를 생성합니다
 */
 
select * from emp;
select * from dept;

-- 사원 정보 출력시에 각 사원들이 소속된 부서의 상세 정보 확인
SELECT *
FROM emp, dept
WHERE emp.deptno = dept.deptno;

-- 위 결과에서 특정 컬럼만 확인
SELECT ename, dname
FROM emp, dept
WHERE emp.deptno = dept.deptno;

-- 이름이 smith인 사람의 부서명 확인
SELECT ename, dname
FROM emp, dept
WHERE emp.deptno = dept.deptno 
AND ename='SMITH';

-- 두개의 테이블에서 동일하게 존재하는 컬럼을 확인할 때에는, 컴럼명 앞에 테이블 명을 명시합니다
SELECT ename, dname, emp.deptno
FROM emp, dept
WHERE emp.deptno = dept.deptno 
AND ename='SMITH';

-- 테이블에 별칭 부여
-- FROM 절 다음에 테이블 이름을 명시하고 공백을 작성한 다음에 별칭을 지정합니다
SELECT E.ename, E.dname, E.deptno
FROM emp E, dept D
WHERE E.deptno = D.deptno
AND E.ename='SMITH';


/*
Non-Equi Join
- 조인 조건에 특정 범위 내에 있는지를 where 절에 비교연산자를 사용해서 join 합니다
 */

desc salgrade;

-- 각 사원의 급여가 몇 등급인지 확인
SELECT ename, sal, grade
FROM emp, salgrade
WHERE sal between losal and hisal;


-- 사원 이름과 소속 부서, 급여의 등급 확인
-- 1. emp 테이블의 부서번호로 dept 테이블을 참조해서 부서이름 가져오고
-- 2. emp 테이블의 급여로 salgrade 테이블 참조해서 등급 가져오기
SELECT E.ename, D.dname, E.sal, S.grade
FROM emp E, dept D, salgrade S
WHERE E.deptno = D.deptno
AND E.sal BETWEEN S.losal AND S.hisal;


/*
Self Join
- 조인은 두개 이상의 서로 다른 테이블을 연결하는 것 뿐만 아니라,
  하나의 테이블 내에서 조인을 해서 원하는 결과를 얻을 수도 있습니다
  자기 자신과 조인을 맺는 것입니다
 */

SELECT * FROM emp;
SELECT ename, mgr FROM emp;
SELECT empno, ename FROM emp;

-- 사원의 담당 manager 확인
SELECT employee.ename || '의 매니저는 ' || manager.ename || ' 입니다'
FROM emp employee, emp manager  -- 자긴 자신의 테이블에 별칭 부여
WHERE employee.mgr = manager.empno; -- 같은 속성값으로 참조


/*
Outer Join
- 조인 조건에 만족하지 않는 행도 나타내는 조인입니다
- 2개 이상의 테이블이 조인될 때, 어느 한쪽의 테이블에는 해당하는 데이터가 있지만,
  다른쪽 테이블에는 데이터가 없을 경우 그 데이터가 출력되지 않는 것을 해결할 수 있습니다
- (+) 기호를 조인 조건에서 정보가 부족한 컬럼 이름 뒤에 붙입니다
 */

select * from emp;
SELECT employee.ename || '의 매니저는 ' || manager.ename || ' 입니다'
FROM emp employee, emp manager  -- 자긴 자신의 테이블에 별칭 부여
WHERE employee.mgr = manager.empno(+); -- 사원번호(empno)가 null 인 사원은 없음


--------------------------------------------------------------------

select * from dept;

-- 'new york' 에서 근무하는 사원의 이름과 급여를 출력하세요
SELECT ename, sal
FROM emp, dept
WHERE emp.deptno = dept.deptno
and dept.loc='NEW YORK';

-- 'smith' 와 동일한 근무지에서 근무하는 사원의 이름을 출력하세요
SELECT e.ename, e2.ename -- e.name (임의의 사원명), e2.enane(같은 사원명)
FROM emp E, emp E2
WHERE e.deptno = e2.deptno
AND e.ename = 'SMITH'
AND e.ename <> e2.ename; -- 왼쪽과 오른쪽에 같은 이름을 가진 컬럼 제거


-- 사원 테이블에는 부서 번호가 40인 사원이 없지만, 
-- 외부 조인(outer join)을 사용해서 부서 테이블에 있는 부서 번호가 40인 부서명 operation 이 출력되게 하세요 
SELECT E.ename, E.deptno, D.deptno, D.dname
FROM emp E, dept D
WHERE E.deptno(+) = D.deptno;




-------------------------QUIZ-------------------------

-- emp 테이블을 사용해서, 직급에 따라서 급여를 인상하는 쿼리문을 작성하세요
-- ANALYST   -> 5%
-- SALESMAN  -> 10%
-- MANAGER   -> 15%
-- CLERK     -> 20%
SELECT ename,job,sal,
        decode(job,'ANALSYST', sal*0.05 + sal,
                    'SALESMAN', sal*0.1 + sal,
                    'MANAGER', sal*0.15 + sal,
                    'CLERK', sal*0.2 + sal
        ) as "인상 급여" FROM emp;
        

-- emp 테이블을 사용해서, 급여액에 따라 고액, 평액, 저액을 출력하는 쿼리문을 작성하세요
-- 3000 이상 -> 고액
-- 1000 이상 -> 평액
-- 그외      -> 저액

SELECT ename,sal,case when sal >= 3000 then '고액'
                      when sal >= 1000 then '평액'
                      else '평액' end as "급여 등급" FROM emp;






























































